<?php

/**
 * @file
 * status_time.module
 * Developer: Danilevsky Kirill k.danilevsky@gmail.com
 */

/**
 * Implementation of hook_help.
 * 
 */
function status_time_help($path, $arg) {
  switch ($path) {
    case "admin/help#status_time":
      return t("<p>This module allow users to assign the lifetime in days their account.</p>");
  }
}

/**
 * Implementation of hook_form_form_id_alter.
 * 
 * Add new field to the form for add new user if is admin.
 */
function status_time_form_user_register_form_alter(&$form, &$form_state) {
  if (user_access('administrator', $account = NULL)) {
    $form['status_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Lifetime'),
      '#default_value' => 0,
      '#weight' => 3,
      '#size' => 5,
      '#maxlength' => 5,
      '#description' => t('Enter the lifetime of the user\'s account in days (0 - unlimited).'),
    );
  }
  return $form;
}

/**
 * Implementation of hook_form_form_id_alter.
 * 
 * Add new field to the form edit user if is admin.
 */
function status_time_form_user_profile_form_alter(&$form, &$form_state) {
  // Check permission.
  if (user_access('administrator', $account = NULL)) {
    // Get days from table.
    $lifetime = db_select('field_status_time', 's')
        ->fields('s', array('days'))
        ->condition('s.uid', $form['#user']->uid)
        ->execute()
        ->fetchField();
    if (empty($lifetime)) {
      $lifetime = 0;
    }
    $form['status_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Lifetime'),
      '#default_value' => $lifetime,
      '#weight' => 3,
      '#size' => 5,
      '#maxlength' => 5,
      '#description' => t('Enter the lifetime of the user\'s account in days (0 - unlimited).'),
    );
  }
  return $form;
}

/**
 * Implementation of hook_user_insert.
 *
 * We will be insert record the lifetime of the user's account.
 * 
 */
function status_time_user_insert(&$edit, $account, $category) {
  // Insert field data to DB.
  if (user_access('administrator')) {
    db_insert('field_status_time')
        ->fields(array('uid' => $account->uid, 'days' => $edit['status_time']))
        ->execute();
  }
}

/**
 * Implementation of hook_user_update.
 *
 * We will be edit record the lifetime of the user's account.
 * 
 */
function status_time_user_update(&$edit, $account, $category) {
  // Update field data to DB.
  if (user_access('administrator')) {
    $lifetime = db_select('field_status_time', 's')
        ->fields('s', array('days'))
        ->condition('s.uid', $account->uid)
        ->execute()
        ->fetchField();
    if (empty($lifetime)) {
      db_insert('field_status_time')
          ->fields(array('uid' => $account->uid, 'days' => $edit['status_time']))
          ->execute();
    }
    else {
      db_update('field_status_time')
          ->fields(array('days' => $edit['status_time']))
          ->condition('uid', $account->uid)
          ->execute();
    }
  }
}

/**
 * Implementation of hook_user_delete.
 *
 * We will be delete record the lifetime of the user's account.
 * 
 */
function status_time_user_delete($account) {
  db_delete('field_status_time')
      ->condition('uid', $account->uid)
      ->execute();
}

/**
 * Implementation of hook_cron().
 * 
 * Change status user's account if date is not actual.
 */
function status_time_cron() {
  $query = db_select('field_status_time', 's');
  $query->leftJoin('users', 'u', 'u.uid=s.uid AND u.uid>1');
  $query->fields('s', array('uid'));
  $query->condition('u.status', 1);
  $query->condition('s.days', 0, '>');
  $query->where('UNIX_TIMESTAMP(NOW()) > :created', array(':created' => 'u.created+(86400*s.days)'));
  $result = $query->execute();
  foreach ($result as $key => $value) {
    dpm($value);
    db_update('users')
        ->fields(array('status' => 0))
        ->condition('uid', $value->uid)
        ->execute();
  }
}
